= A useful HTTP client =

Emacs has quite a few HTTP clients but they are all rather old. This
is my attempt at a modern one.

The idea is to always use callbacks to collect the response.

== Examples ==

Here's a basic example:

{{{
;; -*- lexical-binding: t -*-
(require 'web)

(let ((url "http://feeds.pinboard.in/json/u:nicferrier"))
  (web-http-get
   (lambda (httpc header my-data)
     (with-current-buffer (get-buffer-create "nicfeed")
       (goto-char (point-max))
       (insert my-data)))
   :url url))
}}}

That creates the buffer {{{nicfeed}}} with the downloaded contents in
it.

Here's a POST:

{{{
;; -*- lexical-binding: t -*-

(require 'web)

(let ((query-data (make-hash-table :test 'equal)))
  (puthash 'name "nic" query-data)
  (puthash 'email "nic@example.com" query-data)
  (web-http-post
    (lambda (con header data)
      (message "data received is: %s" data))
     "http://localhost:8001/someplace"
     :data query-data))
}}}

SSL works too:

{{{
;; -*- lexical-binding: t -*-

(require 'web)

(web-http-call
 "GET"
 (lambda (conn headers data)
   (message "%S %S" headers data))
 :url "https://duckduckgo.com/"
 :data '(("q" . "search+engine")))
}}}

and JSON has special support:

{{{
;; -*- lexical-binding: t -*-

(require 'web)

(web-json-post 
  (lambda (conn headers data)
     (message "%S" data))
  "http://someurlthatproducesjson/")
}}}

== Installing ==

I keep the {{{web}}} package on [[http://marmalade-repo.org]] but if
you want to install it manually you can just install the package file
{{{web.el}}}.

Using {{{elpakit}}} you can also get testing.
